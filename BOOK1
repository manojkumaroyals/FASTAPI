from fastapi import Body,FastAPI

app=FastAPI()

BOOKS =[
{'title':'Title 1','author':'one','category':'science'},
{'title':'Title 2','author':'two','category':'science'},
{'title':'Title 3','author':'three','category':'math'},
{'title':'Title 4','author':'four','category':'biology'},
{'title':'Title 5','author':'two','category':'english'},
{'title':'Title 6','author':'six','category':'science'}
]
@app.get("/books")

async def read_all_books():
    return BOOKS

#-------PATH PARAMETRS--------#
# @app.get("/books/{book_title}")
# async def read_book(book_title:str):
#     for book in BOOKS:
#         if book.get('title').casefold()== book_title.casefold():
#             return book


@app.get("/books/{book_title}")
async def read_book(book_title:str,new_book=Body()):
    for book in BOOKS:
        if book.get('title').casefold()== book_title.casefold():
            return book

@app.get("/books/")
async def read_category_by_query(category:str):
    books_to_return=[]
    for book in BOOKS:
        if book.get('category').casefold()==category.casefold():
            books_to_return.append(book)
    return books_to_return



 #query parameters with path para...


@app.get("/books/{book_author}/")
async def read_author_category_by_query(book_author:str,category:str):
    books_to_return=[]
    for book in BOOKS:
        if book.get('author').casefold()== book_author.casefold() and book.get('category').casefold()==category.casefold():
            books_to_return.append(book)
    return books_to_return


#POST

@app.post("/books/create_book")
async def create_book(new_book=Body()):
    BOOKS.append(new_book)

#PUT

@app.put("/books/update_book")

async def update_book(updated_book=Body()):
    for i in range(len(BOOKS)):
        if BOOKS[i].get('title').casefold()==updated_book.get('title').casefold():
            BOOKS[i]=updated_book


#DELETE

@app.delete("/books/delete_book/{book_title}")
async def delete_book(book_title:str):
    for i in range(len(BOOKS)):
        if BOOKS[i].get('title').casefold()==book_title.casefold():
            BOOKS.pop(i)
            break

#ASSIGNMENT/ GET ALL BOOKS FROM A SPECIFIC AUTHOR BY PATH PARAMETERS
@app.get("/books/byauthor/{author}")
async def read_books_by_author_path(author:str):
    books_to_return=[]
    for book in BOOKS:
        if book.get('author').casefold()==author.casefold():
            books_to_return.append(book)

    return books_to_return