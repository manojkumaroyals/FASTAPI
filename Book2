from fastapi import FastAPI,Path,Query,HTTPException,status
from pydantic import BaseModel,Field
from typing import  Optional


app=FastAPI()

class Book:
    id:int
    title:str
    author:str
    description:str
    rating:int
    publish_date:int

    def __init__(self,id,title,author,description,rating,publish_date):
        self.id=id
        self.title=title
        self.author=author
        self.description=description
        self.rating=rating
        self.publish_date=publish_date


class BookRequest(BaseModel):
    #id:Optional[int]=Field(title="new title")
    id:int
    title:str=Field(min_length=3)
    author:str=Field(min_length=4)
    description:str=Field(min_length=3,max_length=100)
    rating:int=Field(gt=0,lt=6)
    publish_date:int=Field(gt=1999,lt=2031)

    class Config:
        json_schema_extra = {
            'example': {
                'title': 'A new book',
                'author': 'codingwithroby',
                'description': 'A new description of a book',
                'rating': 5,
                'published_date': 2029
            }
        }



BOOKS=[
    Book(1,"cse","manoj","very good",5,2014),
    Book(2, "ece", "param", "great good", 5,2026),
    Book(3, "mech", "suresh", "very great good", 5,2013),
    Book(4, "cse2", "manoj", "very goods", 4,2017),
    Book(5, "cse5", "manojkumar", "very good", 3,2028),
    Book(6, "cse4", "manoj2", "very good", 2,2021)

]

@app.get("/books")
async def read_all_books():
    return BOOKS

#fetch single book
@app.get("/books/{book_id}")
# async def read_book(book_id: int):
async def read_book(book_id: int=Path(gt=0)):
    for book in BOOKS:
        if book.id == book_id:
            return book

#filter by rating
@app.get("/books/")
async def read_book_by_rating(book_rating: int =Query(gt=0,lt=6 )):
    books_to_return = []
    for book in BOOKS:
        if book.rating == book_rating:
            books_to_return.append(book)
    return books_to_return

#put
# @app.put("/books/update_book")
# async def update_book(book: BookRequest):
#     for i in range(len(BOOKS)):
#         if BOOKS[i].id == book.id:
#             BOOKS[i] = book

@app.put("/books/update_book", status_code=status.HTTP_204_NO_CONTENT)
async def update_book(book: BookRequest):
    book_changed = False
    for i in range(len(BOOKS)):
        if BOOKS[i].id == book.id:
            BOOKS[i] = book
            book_changed = True
    if not book_changed:
        raise HTTPException(status_code=404, detail='Item not found')
#########3
# @app.delete("/books/{book_id}")
# async def delete_book(book_id: int=Path(gt=0)):
#     for i in range(len(BOOKS)):
#         if BOOKS[i].id == book_id:
#             BOOKS.pop(i)
#             break

@app.delete("/books/{book_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_book(book_id: int = Path(gt=0)):
    book_changed = False
    for i in range(len(BOOKS)):
        if BOOKS[i].id == book_id:
            BOOKS.pop(i)
            book_changed = True
            break
    if not book_changed:
        raise HTTPException(status_code=404, detail='Item not found')


@app.get("/books/{book_id}", status_code=status.HTTP_200_OK)
async def read_book(book_id: int = Path(gt=0)):
    for book in BOOKS:
        if book.id == book_id:
            return book
    raise HTTPException(status_code=404, detail='Item not found')


# @app.get("/books/publish/")
# async def read_books_by_publish_date(publish_date: int =Query(gt=1999,lt=2030)):
#     books_to_return = []
#     for book in BOOKS:
#         if book.publish_date == publish_date:
#             books_to_return.append(book)
#     return books_to_return
@app.get("/books/publish/", status_code=status.HTTP_200_OK)
async def read_books_by_publish_date(published_date: int = Query(gt=1999, lt=2031)):
    books_to_return = []
    for book in BOOKS:
        if book.published_date == published_date:
            books_to_return.append(book)
    return books_to_return



@app.post("/create-book")
async def create_book(book_request:BookRequest):
    new_book=Book(**book_request.dict())
    print(type(new_book))
    BOOKS.append(find_book_id(new_book))


def find_book_id(book:Book):

    book.id=1 if len(BOOKS)==0 else BOOKS[-1]
    # if len(BOOKS)>0:
    #     book.id=BOOKS[-1].id+1
    # else:
    #     book.id=1

    return book